"""add core tables

Revision ID: f34a5d703adc
Revises:
Create Date: 2025-09-28 22:49:59.149355

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f34a5d703adc"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS admin_logs")
    op.execute("CREATE SCHEMA IF NOT EXISTS boards")
    op.execute("CREATE SCHEMA IF NOT EXISTS post_votes")
    op.execute("CREATE SCHEMA IF NOT EXISTS posts")
    op.execute("CREATE SCHEMA IF NOT EXISTS threads")
    op.execute("CREATE SCHEMA IF NOT EXISTS users")

    # Создаем таблицы в правильном порядке зависимостей

    op.create_table(
        "users",
        sa.Column("username", sa.String(length=50), nullable=False, comment="Username"),
        sa.Column("email", sa.String(), nullable=False, comment="Email address"),
        sa.Column(
            "password_hash", sa.String(), nullable=False, comment="Password hash"
        ),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("is_banned", sa.Boolean(), nullable=False),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("password_hash"),
        sa.UniqueConstraint("sid"),
        sa.UniqueConstraint("username"),
        schema="users",
        comment="User table",
    )

    op.create_table(
        "board_categories",
        sa.Column(
            "title", sa.String(), nullable=False, comment="Title of the board category"
        ),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("sid"),
        schema="boards",
        comment="Board categories table",
    )

    op.create_table(
        "admin_logs",
        sa.Column("admin_sid", sa.UUID(), nullable=True, comment="Admin ID"),
        sa.Column("action", sa.String(), nullable=False, comment="Action"),
        sa.Column("target_type", sa.String(), nullable=False, comment="Target type"),
        sa.Column("target_id", sa.UUID(), nullable=False, comment="Target ID"),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["admin_sid"], ["users.users.sid"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("sid"),
        schema="admin_logs",
        comment="Admin logs table",
    )

    op.create_table(
        "boards",
        sa.Column(
            "board_category_sid", sa.UUID(), nullable=True, comment="Board category ID"
        ),
        sa.Column("name", sa.String(), nullable=False, comment="Name of the board"),
        sa.Column(
            "description",
            sa.String(),
            nullable=False,
            comment="Description of the board",
        ),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["board_category_sid"], ["boards.board_categories.sid"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("sid"),
        schema="boards",
        comment="Boards table",
    )

    op.create_table(
        "threads",
        sa.Column("title", sa.String(), nullable=False, comment="Thread title"),
        sa.Column(
            "is_locked", sa.Boolean(), nullable=False, comment="Thread is locked"
        ),
        sa.Column(
            "is_pinned", sa.Boolean(), nullable=False, comment="Thread is pinned"
        ),
        sa.Column("board_sid", sa.UUID(), nullable=False, comment="Board ID"),
        sa.Column("user_sid", sa.UUID(), nullable=False, comment="User ID"),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["board_sid"], ["boards.boards.sid"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_sid"], ["users.users.sid"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("sid"),
        schema="threads",
        comment="Threads table",
    )

    op.create_table(
        "posts",
        sa.Column("content", sa.String(), nullable=True, comment="Content of the post"),
        sa.Column("thread_sid", sa.UUID(), nullable=False, comment="Thread ID"),
        sa.Column("user_sid", sa.UUID(), nullable=False, comment="User ID"),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["thread_sid"], ["threads.threads.sid"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_sid"], ["users.users.sid"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("sid"),
        schema="posts",
        comment="Post table",
    )

    op.create_table(
        "post_votes",
        sa.Column("post_sid", sa.UUID(), nullable=False, comment="Post ID"),
        sa.Column("user_sid", sa.UUID(), nullable=False, comment="User ID"),
        sa.Column("value", sa.Integer(), nullable=False, comment="Value of post votes"),
        sa.Column("sid", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["post_sid"], ["posts.posts.sid"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_sid"], ["users.users.sid"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("sid"),
        sa.UniqueConstraint("sid"),
        schema="post_votes",
        comment="Post Votes table",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("post_votes", schema="post_votes")
    op.drop_table("posts", schema="posts")
    op.drop_table("threads", schema="threads")
    op.drop_table("boards", schema="boards")
    op.drop_table("admin_logs", schema="admin_logs")
    op.drop_table("board_categories", schema="boards")
    op.drop_table("users", schema="users")

    op.execute("DROP SCHEMA IF EXISTS post_votes")
    op.execute("DROP SCHEMA IF EXISTS posts")
    op.execute("DROP SCHEMA IF EXISTS threads")
    op.execute("DROP SCHEMA IF EXISTS admin_logs")
    op.execute("DROP SCHEMA IF EXISTS boards")
    op.execute("DROP SCHEMA IF EXISTS users")
    # ### end Alembic commands ###
